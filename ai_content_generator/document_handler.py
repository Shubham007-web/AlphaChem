# document_handler.py file for ai_content_generator module
# document_handler.py file for ai_content_generator module

from docx import Document
from docx.shared import Pt
from datetime import datetime
from ai_content_generator.validation import validate_reading_score

class DocumentHandler:
    def __init__(self, unit_name, chapter_name, lesson_name):
        """
        Initializes the DocumentHandler with the unit, chapter, and lesson names.
        """
        self.unit_name = unit_name
        self.chapter_name = chapter_name
        self.lesson_name = lesson_name
        self.doc = Document()  # Creates a new Word document

    def add_metadata(self):
        """
        Adds metadata such as generation date and version to the document.
        """
        para = self.doc.add_paragraph()
        para.add_run(f"Generated for: {self.unit_name}, {self.chapter_name}, {self.lesson_name}\n").bold = True
        para.add_run(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n").italic = True
        para.add_run("Version: 1.0\n").italic = True

    def format_content(self, raw_content):
        """
        Cleans and formats the generated lesson content in the document.
        
        Parameters:
        - raw_content (str): The raw content generated by the OpenAI API.
        """
        lines = raw_content.split("\n")
        for line in lines:
            line = line.strip()  # Remove unnecessary spaces
            
            if line.startswith("###"):
                heading = self.doc.add_heading(line[3:].strip(), level=3)
                heading.runs[0].font.size = Pt(13)  # Set heading 3 font size
            elif line.startswith("##"):
                heading = self.doc.add_heading(line[2:].strip(), level=2)
                heading.runs[0].font.size = Pt(14)  # Set heading 2 font size
            elif line.startswith("#"):
                heading = self.doc.add_heading(line[1:].strip(), level=1)
                heading.runs[0].font.size = Pt(16)  # Set heading 1 font size
            elif "**" in line:
                parts = line.split("**")
                para = self.doc.add_paragraph()
                for i, part in enumerate(parts):
                    if i % 2 == 0:
                        para.add_run(part).font.size = Pt(12)
                    else:
                        para.add_run(part).bold = True  # Bold text between "**"
            else:
                para = self.doc.add_paragraph()
                para.add_run(line).font.size = Pt(12)  # Set default paragraph font size

        # Validate reading score after formatting
        reading_score = validate_reading_score(raw_content)
        if reading_score < 80:
            print(f"Warning: Content might be too difficult for target audience. Flesch Reading Ease Score: {reading_score}")

    def save_document(self, file_path):
        """
        Saves the formatted document to the specified file path.
        
        Parameters:
        - file_path (str): The path where the document will be saved.
        """
        try:
            self.doc.save(file_path)
            print(f'Content successfully saved to {file_path}')
        except Exception as e:
            print(f"Error saving the file {file_path}: {e}")
